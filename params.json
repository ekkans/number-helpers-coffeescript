{"tagline":"Ruby on Rails NumberHelpers written in CoffeeScript","name":"NumberHelpers in CoffeeScript","body":"## Problem ##\r\nNow that View Code is migrating more to BackBone (or JS) rendered context, the useful Rails NumberHelpers are not available. I know the Rails methods by heart, I do not want to learn new syntax for the identical solution in JavaScript. \r\n\r\n## Solution ##\r\nA CoffeeScript implementation of the Rails NumberHelpers solves this problem with a consistent api regardless of the View context.\r\n\r\n## Details ##\r\nThis library uses the [Rails NumberHelpers Documentation](http://api.rubyonrails.org/classes/ActionView/Helpers/NumberHelper.html) as the recipe for all method names, parameters, and test cases. This library uses the Jasmine Test Framework to implement the same test specs as the Rails code.\r\n\r\n## Caveat ##\r\nThis is an English only local. Currently no internationalization is supported.\r\n\r\n## Emcien ##\r\nThis library is extracted from the several Rails/BackBone applications written at [Emcien](http://emcien.com). Emcien is always looking for smart Software Engineers/Developers to work from our Atlanta, GA headquarters. Send us an email [devjobs@emcien.com](mailto:devjobs@emcien.com).\r\n\r\n***\r\n\r\n## Number to Currency ##\r\nFormats a number into a currency string (e.g., $13.65). You can customize the format in the options hash.\r\n\r\n`NumberHelpers.number_to_currency(123, {option: value})`\r\n\r\n* `{ precision: 2 }` - Sets the level of precision (defaults to 2).\r\n* `{ unit: '$' }` - Sets the denomination of the currency (defaults to \"$\").\r\n* `{ separator: '.' }` - Sets the separator between the units (defaults to \".\").\r\n* `{ delimiter: ',' }` - Sets the thousands delimiter (defaults to \",\").\r\n\r\n**Examples:**\r\n\r\n`NumberHelpers.number_to_currency(1234567890.50)`\r\n$1,234,567,890.50\r\n\r\n`NumberHelpers.number_to_currency('1234567890.50')`\r\n$1,234,567,890.50\r\n\r\n`NumberHelpers.number_to_currency(1234567890.506)`\r\n$1,234,567,890.51\r\n\r\n`NumberHelpers.number_to_currency(1234567890.506, {precision: 0})`\r\n$1,234,567,890\r\n\r\n`NumberHelpers.number_to_currency(1234567890.506, {precision: 1})`\r\n$1,234,567,890.5\r\n\r\n`NumberHelpers.number_to_currency(1234567890.506, {precision: 3})`\r\n$1,234,567,890.506\r\n\r\n`NumberHelpers.number_to_currency(1234567890.506, {precision: 4})`\r\n$1,234,567,890.5060\r\n\r\n`NumberHelpers.number_to_currency('123a456')` #=> $123a456\r\n\r\n`NumberHelpers.number_to_currency(1234567890.50, {unit:\"&pound;\", separator:\",\", delimiter:\"\"})`\r\n&pound;1234567890,50\r\n\r\n***","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}